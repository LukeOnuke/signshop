plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'com.gradleup.shadow' version '9.1.0' // Latest Shadow plugin
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"signshop" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

configurations {
	// Custom resolvable configuration to include only JDA and its deps
	shadedImplementation {
		canBeResolved = true
		canBeConsumed = false
		extendsFrom implementation
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation platform("org.hibernate.orm:hibernate-platform:7.1.1.Final")

	// use the versions from the platform
	implementation "org.hibernate.orm:hibernate-core"
	implementation "jakarta.transaction:jakarta.transaction-api"
	// https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
	implementation("com.mysql:mysql-connector-j:9.4.0")

//	// https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
//	implementation("net.bytebuddy:byte-buddy:1.17.7")

	compileOnly("org.projectlombok:lombok:1.18.40")
	annotationProcessor("org.projectlombok:lombok:1.18.40")

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

shadowJar {
	configurations = [project.configurations.shadedImplementation]
	archiveClassifier.set("dev-shadow") // temporary classifier before remap

	mergeServiceFiles()
}

tasks{
	// Ensure shadowJar task uses the right configuration and settings
	shadowJar {
		// configurations are set by the shadow plugin block above
	}

	// Loom remapJar task remaps the shaded jar and produces the final output
	remapJar {
		dependsOn shadowJar
		inputFile.set(shadowJar.archiveFile)
		archiveClassifier.set("") // final jar with no classifier
	}

	// Disable normal jar, you want to use the remapped shadow jar only
	jar {
		enabled = false
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}